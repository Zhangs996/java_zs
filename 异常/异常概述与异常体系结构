在使用计算机语言进行项目开发的过程中，即使程序员把代码写得尽善尽美，在系统的运行过程中仍然会遇到一些问题，因为很多问题不是靠代码能够避免的，比如：客户输入数据的格式，读取文件是否存在，网络是否始终保持通畅等等。

在Java语言中，将程序执行中发生的不正常情况称为“异常”。(开发过程中的语法错误和逻辑错误不是异常)

    Java程序在执行过程中所发生的异常事件可分为两类：

    Error：Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。比如：StackOverflowError和OOM。一般不编写针对性的代码进行处理。

    /*
     * Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。
     * 比如：StackOverflowError和OOM。
     * 一般不编写针对性的代码进行处理。
     *
     */
    public class ErrorTest {
    	public static void main(String[] args) {
    		//1.栈溢出:java.lang.StackOverflowError
    //		main(args);
    		//2.堆溢出:java.lang.OutOfMemoryError
    //		Integer[] arr = new Integer[1024*1024*1024];

    	}
    }

    Exception:其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。例如：
        空指针访问
        试图读取不存在的文件
        网络连接中断
        数组角标越界

    对于这些错误，一般有两种解决方法：

    一是遇到错误就终止程序的运行。
    另一种方法是由程序员在编写程序时，就考虑到错误的检测、错误消息的提示，以及错误的处理。

捕获错误最理想的是在编译期间，但有的错误只有在运行时才会发生。比如：除数为0，数组下标越界等

    异常分类：编译时异常和运行时异常

    运行时异常
        是指编译器不要求强制处置的异常。一般是指编程时的逻辑错误，是程序员应该积极避免其出现的异常。java.lang.RuntimeException类及它的子类都是运行时异常。
        对于这类异常，可以不作处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响。
    编译时异常
        是指编译器要求必须处置的异常。即程序在运行时由于外界因素造成的一般性异常。编译器要求Java程序必须捕获或声明所有编译时异常。
        对于这类异常，如果程序不处理，可能会带来意想不到的结果。
         * java.lang.Throwable
         * 		|----java.lang.Error:一般不编写针对性的代码进行处理
         * 		|----java.lang.Exception:可以进行异常处理
         * 			|----编译时异常(checked)
         * 				|----IOEXception
         * 					|----FileNotFoundException
         * 				|----ClassNotFoundException
         * 			|----运行时异常(RuntimeException,unchecked)
         * 				|----NullPointerException
         * 				|----ArrayIndexOutOfBoundsException
         * 				|----ClassCaseException
         * 				|----NumberFormatException
         * 				|----InputMismatchException
         * 				|----ArithmaticException
 * 异常的处理:抓抛模型
 *
 * 过程一:“抛”：程序在征程执行过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象
 * 			 并将此对象抛出。
 * 			一旦抛出对象以后，其后的代码就不再执行。
 *
 * 过程二:“抓”:可以理解为异常的处理方式：① try-catch-finally  ② throws
 *
 * 二、try-catch-finally的使用
 *
 * try{
 * 		//可能出现异常的代码
 * }catch(异常类型1 变量名1){
 * 		//处理异常的方式1
 * }catch(异常类型2 变量名2){
 * 		//处理异常的方式2
 * }catch(异常类型3 变量名3){
 * 		//处理异常的方式3
 * }
 * ...
 * finally{
 * 		//一定会执行的代码
 * }
 *
 * 说明:
 * 1.finally是可选的。
 * 2.使用try将可能出现异常代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象
 *   的类型，去catch中进行匹配。
 * 3.一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常的处理。一旦处理完成，就跳出当前的
 *   try-catch结构（在没有写finally的情况）。继续执行其后的代码。
 * 4.catch中的异常类型如果没有子父类关系，则谁声明在上，谁声明在下无所谓。
 *   catch中的异常类型如果满足子父类关系，则要求子类一定声明在父类的上面。否则，报错
 * 5.常用的异常对象处理的方式： ① String  getMessage()    ② printStackTrace()
 * 6.在try结构中声明的变量，再出了try结构以后，就不能再被调用,例65行:System.out.println(num);
 * 7.try-catch-finally结构可以嵌套
 *
 * 体会1：使用try-catch-finally处理编译时异常，是得程序在编译时就不再报错，但是运行时仍可能报错。
 *     相当于我们使用try-catch-finally将一个编译时可能出现的异常，延迟到运行时出现。
 *
 * 体会2：开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写try-catch-finally了。
 *      针对于编译时异常，我们说一定要考虑异常的处理。
 /*
  * 异常处理的方式二：throws + 异常类型
  *
  * 1. "throws + 异常类型"写在方法的声明处。指明此方法执行时，可能会抛出的异常类型。
  *     一旦当方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常
  *     类型时，就会被抛出。异常代码后续的代码，就不再执行！
  *
  *     关于异常对象的产生:① 系统自动生成的异常对象
  * 					② 手动生成一个异常对象，并抛出(throw)
  *
  * 2. 体会：try-catch-finally:真正的将异常给处理掉了。
  *        throws的方式只是将异常抛给了方法的调用者。  并没有真正将异常处理掉。

当我们编写一个类时，其实就是在描述其对象的属性和行为，而并没有产生实质上的对象， 只有通过new关键字才会产生出对象，
这时系统才会分配内存空间给对象，其方法才可以供外部调用。我们有时候希望无论是否产生了对象或无论产生了多少对象的情况下，
某些特定的数据在内存空间里只有一份， 例如所有的中国人都有个国家名称

static可以修饰 属性、方法、代码块、内部类
不能修饰构造器

static修饰的属性（类变量）

有该类创建的所有对象，都共用这个变量
当其中一个对象修改了此属性，其他属性访问到该属性的结果也会改变。
类变量在类加载时加载到内存，且只有一份数据
静态的变量（类变量）访问方法之一："类.类变量" ，建议使用这种，当"类.实例变量" 访问时会报错的
类变量访问方法二："对象.类变量"
类变量的加载早于对象
访问权限允许时，可以不创建对象，直接被调用
实例变量 非static修饰的属性变量

类变量 static修饰的属性变量

static修饰的方法（类方法）

类方法在类在加载时一起加载
可以通过"类.类方法" 调用，也可以"对象.类方法"，建议使用第一种
静态方法可以可以调用静态属性和静态方法，但不能调用非静态的属性和非静态的方法
重载的方法需要同时为static或者非static
注意 静态的结构(static的属性、方法、代码块、内部类)的生命周期要早于非静态的结构，被回收的时间要晚于非静态的结构 静态方法里不能有this、super关键字

类属性、类方法的设计思想
类属性作为该类各个对象之间共享的变量。在设计类时,分析哪些类属性不因对象的不同而改变，将这些属性设置为类属性。相应的方法设置为类方法。
如果方法与调用者无关，则这样的方法通常被声明为类方法，由于不需要创建对象就可以调用类方法，从而简化了方法的调用
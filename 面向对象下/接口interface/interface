接口和类是并列关系
1.相同点
A. 两者都是抽象类，都不能实例化new。
B. interface实现类及abstrctclass的子类都必须要实现已经声明的抽象方法。

2. 不同点
A. interface需要实现，要用implements，而abstract class需要继承，要用extends。
B. 一个类可以实现多个interface，但一个类只能继承一个abstract class。
C. interface强调特定功能的实现，而abstractclass强调所属关系。
D. 尽管interface实现类及abstrct class的子类都必须要实现相应的抽象方法，但实现的形式不同。interface中的每一个方法都是抽象方法，都只是声明的(declaration,没有方法体)，实现类必须要实现。而abstractclass的子类可以有选择地实现。
这个选择有两点含义：
    一是Abastract class中并非所有的方法都是抽象的，只有那些冠有abstract的方法才是抽象的，子类必须实现。那些没有abstract的方法，在Abstrct class中必须定义方法体。
    二是abstract class的子类在继承它时，对非抽象方法既可以直接继承，也可以覆盖；而对抽象方法，可以选择实现，也可以通过再次声明其方法为抽象的方式，无需实现，留给其子类来实现，但此类必须也声明为抽象类。既是抽象类，当然也不能实例化。
E. abstract class是interface与Class的中介。
interface是完全抽象的，只能声明方法，而且只能声明pulic的方法，不能声明private及protected的方法，不能定义方法体，也不能声明实例变量。然而，interface却可以声明常量变量，并且在JDK中不难找出这种例子。但将常量变量放在interface中违背了其作为接口的作用而存在的宗旨，也混淆了interface与类的不同价值。如果的确需要，可以将其放在相应的abstractclass或Class中。
abstract class在interface及Class中起到了承上启下的作用。一方面，abstract class是抽象的，可以声明抽象方法，以规范子类必须实现的功能；另一方面，它又可以定义缺省的方法体，供子类直接使用或覆盖。另外，它还可以定义自己的实例变量，以供子类通过继承来使用。

3. interface的应用场合
A. 类与类之前需要特定的接口进行协调，而不在乎其如何实现。
B. 作为能够实现特定功能的标识存在，也可以是什么接口方法都没有的纯粹标识。
C. 需要将一组类视为单一的

一方面，有时必须从几个类中派生出一个子类，继承它们所有的属性和方法。但是，Java 不支持多重继承。有了接口，就可以得到多重继承的效果。
另一方面，有时必须从几个类中抽取出一些共同的行为特征，而它们之间又没有 is-a 的关系，仅仅是具有相同的行为特征而已。
例如：鼠标、键盘、打印机、扫描仪、摄像头、充电器、MP3 机、手机、数码相机、移动硬盘等都支持 USB 连接。
接口就是规范，定义的是一组规则，体现了现实世界中“如果你是/要…则必须能…”的思想。继承是一个"是不是"的关系，而接口实现则是"能不能"的关系。
接口的本质是契约，标准，规范，就像我们的法律一样。制定好后大家都要遵守。

/* 接口(interface)是抽象方法和常量值定义的集合。
 * 接口的特点：
 * 用 interface 来定义。
 * 接口中的所有成员变量都默认是由 public static final 修饰的。
 * 接口中的所有抽象方法都默认是由 public abstract 修饰的。
 * 接口中没有构造器。
 * 接口采用多继承机制。
 */


 * 接口的使用
  * 1.接口使用 interface 来定义。
  * 2.在 Java 中:接口和类是并列的两个结构
  * 3.如何去定义两个接口:定义接口中的成员
  * 	》3.1 JDK7 及以前:只能定义全局常量和抽象方法
  * 		》全局常量:public static final int SPEED 或者 int SPEED（可以省略public static final）
  * 		》抽象方法:public abstract void fly();或者 void fly();(可以省略public abstract)
  *
  *  》3.2 JDK8:除了全局常量和抽象方法之外，还可以定义静态方法、默认方法(略)。
  *
  * 4.接口中不能定义构造器！意味着接口不可以实例化。
  *
  * 5.Java 开发中，接口通过让类去实现(implements)的方式来使用。
  *   如果实现类覆盖了接口中的所有方法，则此实现类就可以实例化
  *   如果实现类没有覆盖接口中所有的抽象方法，则此实现类仍为一个抽象类
  *   所以实现类要重写接口的所有抽象方法
  *
  * 6.Java 类可以实现多个接口 ---》弥补了 Java 单继承性的局限性
  *  格式:class AA extends BB implementd CC,DD,EE
  *
  *  7.接口与接口之间是继承,而且可以多继承
  *
  **********************************
  * 8.接口的具体使用，体现多态性
  * 	   接口的主要用途就是被实现类实现。（面向接口编程）

  //		知识点 1：接口中定义的静态方法，只能通过接口来调用。


  //		知识点 2：通过实现类的对象，可以调用接口中的默认方法。
  //		如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法


  //		知识点 3：如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，
  //		那么子类在没有重写此方法的情况下，默认调用的是父类中的同名同参数的方法。-->类优先原则
  //		知识点 4：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，
  //		那么在实现类没有重写此方法的情况下，报错。-->接口冲突。
  //		这就需要我们必须在实现类中重写此方法
  * 9.接口，实际可以看作是一种规范
  *
  * 面试题:抽象类与接口有哪些异同？

No.	区别点	抽象类	                                     接口
1	定义	包含抽象方法的类	                         主要是抽象方法和全局常量的集合
2	组成	构造方法、抽象方法、普通方法、常量、变量	 常量、抽象方法、(jdk8.0:默认方法、静态方法)
3	使用	子类继承抽象类(extends)	                 子类实现接口(implements)
4	关系	抽象类可以实现多个接口	                 接口不能继承抽象类，但允许继承多个接口
5	常见设计模式	模板方法	                             简单工厂、工厂方法、代理模式
6	对象	都通过对象的多态性产生实例化对象
7	局限	抽象类有单继承的局限	接口没有此局限
8	实际	作为一个模板	是作为一个标准或是表示一种能力
9	选择	如果抽象类和接口都可以使用的话，优先使用接口，因为避免单继承的局限
            都不能new


　　1）抽象类可以提供成员方法的实现细节，而接口中只能存在public abstract 方法；

　　2）抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的；

　　3）接口中不能含有静态代码块以及静态方法，而抽象类可以有静态代码块和静态方法；

　　4）一个类只能继承一个抽象类，而一个类却可以实现多个接口。
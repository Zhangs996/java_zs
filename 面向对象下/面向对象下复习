1.abstract 能修饰什么？有什么特点？
    abstract修饰类和方法
    abstract修饰类以后类不能实例化，在子类将父类的抽象方法实现。
    abstract修饰方法，该抽象方法的类一定是抽象类。抽象方法没有方法体，但是功能是确定的，如果要使用抽象方法，则需要子类实现（重写）。
2.接口是否能继承接口？抽象类能否实现（implements）接口？抽象类能否继承非抽象的类？
    接口能继承接口，接口和接口之间是extends。
    抽象类能实现接口。
    抽象类可以继承非抽象的类（抽象类继承object）。
3．声明抽象类,并包含抽象方法。测试类中创建一个继承抽象类的匿名子类的对象。

new Student().xxx()//这是匿名对象，类知道，对象不知道

    abstract AA{
        public abstract void eat();
    }
    main(){
        AA A = new AA(){
            public abstract void eat(){sout("eat")}
        };
        A.eat();
    }
4.抽象类和接口有哪些共同点和区别?
    相同点：不能实例化
    不同点：抽象类有构造器，接口没有构造器
           接口能被多继承，抽象类只能被单继承
           interface中的每一个方法都是抽象方法，都只是声明的(没有方法体)，实现类必须要实现。而abstract class的子类可以有选择地实现。
           如何去定义两个接口:定义接口中的成员
           JDK7 及以前:只能定义全局常量和抽象方法
                全局常量:public static final int SPEED 或者 int SPEED（可以省略public static final）
                抽象方法:public abstract void fly();或者 void fly();(可以省略public abstract)
           JDK8:除了全局常量和抽象方法之外，还可以定义静态方法、默认方法(略)。
5.如何创建静态成员内部类和非静态成员内部类的对象?
        //创建Dog实例(静态的成员内部类)
        Animal.Dog dog = new Animal.Dog();
        dog.show();


		Animal.Bird bird = new Animal.Bird();//会报错，因为要调用非静态只能先new一个实例
		//创建Bird实例(非静态的成员内部类)
        Animal p = new Animal();
        Animal.Bird bird = p.new Bird();
        bird.sing();

abstract关键字的使用
abstract可以用来修饰的结构:类、方法。
abstract修饰类。抽象类。
    >此类不能实例化。
    >抽象类电定有构造器，便于子类实例化时调用（涉及子类对象实例化的全过程)。
    >开发中，都会提供抽象类的子类，让子类对象实例化,完成相关的操作。
abstract修饰方法:抽象方法
    >抽象方法只有方法的声明，没有方法体。
    >包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法的。
    >若子类重写了父类中的所有的抽象方法后，此子类方可实例化。若子类没有重写父类中的所有的抽象方法，则此子类也是一个抽象类，需要使用abstract修饰。
1.abstract不能用来修饰:属性、构造器等结构
2.abstract不能用来修饰private方法、static方法、final的方法、final的类
* 接口的使用
  * 1.接口使用 interface 来定义。
  * 2.在 Java 中:接口和类是并列的两个结构
  * 3.如何去定义两个接口:定义接口中的成员
  * 	》3.1 JDK7 及以前:只能定义全局常量和抽象方法
  * 		》全局常量:public static final int SPEED 或者 int SPEED（可以省略public static final）
  * 		》抽象方法:public abstract void fly();或者 void fly();(可以省略public abstract)
  *
  *  》3.2 JDK8:除了全局常量和抽象方法之外，还可以定义静态方法、默认方法(略)。
  *
  * 4.接口中不能定义构造器！意味着接口不可以实例化。
  *
  * 5.Java 开发中，接口通过让类去实现(implements)的方式来使用。
  *   如果实现类覆盖了接口中的所有方法，则此实现类就可以实例化
  *   如果实现类没有覆盖接口中所有的抽象方法，则此实现类仍为一个抽象类
  *   所以实现类要重写接口的所有抽象方法
  *
  * 6.Java 类可以实现多个接口 ---》弥补了 Java 单继承性的局限性
  *  格式:class AA extends BB implementd CC,DD,EE
  *
  *  7.接口与接口之间是继承,而且可以多继承
  *
  **********************************
  * 8.接口的具体使用，体现多态性
  * 	   接口的主要用途就是被实现类实现。（面向接口编程）

  //		知识点 1：接口中定义的静态方法，只能通过接口来调用。


  //		知识点 2：通过实现类的对象，可以调用接口中的默认方法。
  //		如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法


  //		知识点 3：如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，
  //		那么子类在没有重写此方法的情况下，默认调用的是父类中的同名同参数的方法。-->类优先原则
  //		知识点 4：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，
  //		那么在实现类没有重写此方法的情况下，报错。-->接口冲突。
  //		这就需要我们必须在实现类中重写此方法
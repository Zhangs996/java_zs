方法的重写(overrides)
定义
    在子类中可以根据需要对从父类继承来的方法进行重新写过，也称方法的覆盖、重置。 在程序执行时，子类的方法将覆盖父类的方法

方法重写规则
    注意的要素： 修饰符 返回值类型 方法名(参数列表) { }
修饰符：
    子类重写方法修饰符权限不能比父类被重写方法访问权限小，可以更大，至少也要相等(修饰符权限不能小,可以理解为继承的开放性)
        private修饰的不能被重写
    子类重写和父类被重写的方法必须同时为static的(这就不是重写了)或同时为非static的类型（只有非static才能被重写）
    子类重写方法抛出的异常类型不能大于父类被重写方法的异常类型
    如果父类中一个方法 private myMethod() { },子类中写了一个 myMethod() { } 或public myMethod() { }， 那么这两种情况都不叫重写!!!。因为父类的方法在子类中不见。
    建议在子类中重写方法时，直接从父类中把类第一行复制过来，再被上}。
返回值类型：
    父类方法的返回值类型是void，子类也必须是void，父类被重写的方法的返回类型是A(Object)，则子类的返回类型是A或者A的子类(String)
    如果父类的返回类型是基本数据类型（比如double），则子类复写的方法的返回类型必须是相同的基本数据类型（double）
    子类重写方法必须和父类被重写方法具有相同的 方法名、参数列表、返回值类型。

public void showInfo() {

多层继承 多层继承

方法重写与方法重载的区别
方法重载
两同一不同
同一个类
同一个方法名
不同的参数列表
方法的重载与方法返回值无关
构造器可以重载

重写
前提在继承的基础之上，子类在获取父类的结构之后，可以对父类中同名的方法进行“重构”
方法的返回值、方法名、形参列表相同
权限修饰符不小于父类同名方法
重写的方法异常类型不大于父类的
两个方法要同为static或非static
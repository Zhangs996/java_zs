/*
 * 子类对象实例化的全过程
 * 虽然子类调用了父类的构造器，但是只有一个对象
 *
 * 1.从结果上看:
 * 		子类继承父类以后，就获取了父类中声明的属性或方法。
 * 		创建子类的对象中，在堆空间中，就会加载所有父类中声明的属性。
 *
 * 2.从过程上看:
 * 		当我们通过子类的构造器创建子类对象时,我们一定会直接或间接的调用其父类构造器，
 * 		直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所有的父类结构，所以才可以看到内存中有
 * 		父类中的结构，子类对象可以考虑进行调用。
 *
 * 明确:虽然创建子类对象时，调用了父类的构造器，但自始至终就创建过一个对象，即为new的子类对象。

 为什么子类构造器会先调用父类无参构造器?

 子类的构造器的第一行默认有 一个super ()调用父类的无参数构造器，写不写都存在，是默认的；

 子类继承父类，子类就得到了父类的属性和行为。
 当我们调用子类构造器初始化子类对象数据的时候，必须先调用父类构造器初始化继承自父类的属性和行为。

 可以在子类构造器中通过super(…)添加参数，
 根据参数选择调用父类的构造器，以便调用父类构造器初始化继承自父类的数据。
 */

